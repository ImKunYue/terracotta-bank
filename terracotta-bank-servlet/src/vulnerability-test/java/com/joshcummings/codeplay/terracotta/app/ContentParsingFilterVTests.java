/*
 * Copyright 2015-2019 Josh Cummings
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.joshcummings.codeplay.terracotta.app;

import com.joshcummings.codeplay.terracotta.AbstractEmbeddedTomcatTest;
import okhttp3.mockwebserver.Dispatcher;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.apache.commons.io.IOUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.entity.BasicHttpEntity;
import org.testng.annotations.Test;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static org.apache.http.client.methods.RequestBuilder.post;
import static org.testng.Assert.*;

public class ContentParsingFilterVTests extends AbstractEmbeddedTomcatTest {
	private MockWebServer evil = new MockWebServer();

	@Test
	public void testGeneralEntityXxe() throws Exception {
		BasicHttpEntity body = new BasicHttpEntity();
		body.setContent(xml("xxe/generalentity.xml"));
		try (CloseableHttpResponse response = this.http.post(post("/login")
				.setHeader("Content-Type", "application/xml")
				.setEntity(body))) {
			byte[] output = IOUtils.toByteArray(response.getEntity().getContent());
			assertFalse(new String(output).contains("1o2neo12ieno"),
					"Exposed secret through general entity XXE");
		}
	}

	@Test
	public void testXincludeXxe() throws Exception {
		BasicHttpEntity body = new BasicHttpEntity();
		body.setContent(xml("xxe/xinclude.xml"));
		try (CloseableHttpResponse response = this.http.post(post("/login")
				.setHeader("Content-Type", "application/xml")
				.setEntity(body))) {
			byte[] output = IOUtils.toByteArray(response.getEntity().getContent());
			assertFalse(new String(output).contains("1o2neo12ieno"),
					"Exposed secret through XInclude XXE");
		}
	}

	@Test
	public void testParameterEntityXxe() throws Exception {
		try ( MockWebServer server = this.evil) {
			DispatchRecorder recorder = new DispatchRecorder();
			server.setDispatcher(recorder);
			server.start();
			BasicHttpEntity body = new BasicHttpEntity();
			body.setContent(port(xml("xxe/parameterentity.xml"), server.getPort()));
			try (CloseableHttpResponse response = this.http.post(post("/login")
					.setHeader("Content-Type", "application/xml")
					.setEntity(body))) {
				byte[] output = IOUtils.toByteArray(response.getEntity().getContent());
				assertFalse(new String(output).contains("1o2neo12ieno"),
						"Exposed secret through Parameter Entity XXE");
				recorder.assertNoRequests();
			}
		}
	}

	@Test
	public void testExfiltrationXxe() throws Exception {
		try ( MockWebServer server = this.evil) {
			DispatchRecorder recorder = new DispatchRecorder();
			server.setDispatcher(recorder);
			server.start();
			BasicHttpEntity body = new BasicHttpEntity();
			body.setContent(port(xml("xxe/exfiltration.xml"), server.getPort()));
			try (CloseableHttpResponse response = this.http.post(post("/login")
					.setHeader("Content-Type", "application/xml")
					.setEntity(body))) {
				recorder.assertDoesNotHaveSecret();
				recorder.assertNoRequests();
			}
		}
	}

	// This test will launch "calc.exe" on your local machine
	@Test(enabled = false)
	public void testJsonRce() throws IOException {
		BasicHttpEntity body = new BasicHttpEntity();
		body.setContent(xml("serialization/rce.json"));
		try (CloseableHttpResponse response = this.http.post(post("/login")
				.setHeader("Content-Type", "application/json")
				.setEntity(body))) {

		}
	}

	// This test will launch "calc.exe" on your local machine
	@Test
	public void testJavaRce() throws IOException {
		try (InputStream payload = xml("serialization/rce.out")) {
			BasicHttpEntity body = new BasicHttpEntity();
			body.setContent(payload);
			try (CloseableHttpResponse response = this.http.post(post("/login")
					.setHeader("Content-Type", "application/octet-stream")
					.setEntity(body))) {

			}
		}
	}

	private InputStream xml(String location) {
		return this.getClass().getClassLoader().getResourceAsStream(location);
	}

	private InputStream port(InputStream xml, int port) {
		Queue<Integer> sb = new LinkedList<>();
		return new InputStream() {
			@Override
			public int read() throws IOException {
				if (sb.peek() != null) {
					return sb.poll();
				} else {
					int read = xml.read();
					if (read == '*') {
						sb.addAll(String.valueOf(port)
								.chars().boxed()
								.collect(Collectors.toList()));
						return read();
					}
					return read;
				}
			}
		};
	}

	private class DispatchRecorder extends Dispatcher {
		List<RecordedRequest> requests = new ArrayList<>();
		Pattern REQUEST_PATH = Pattern.compile("/([^\\?]*)(\\?data=(.*))?");
		String secret;

		@Override
		public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
			this.requests.add(request);
			String body = parsePath(request.getPath())
					.map(this.getClass().getClassLoader()::getResourceAsStream)
					.map(this::readFully)
					.map(String::new)
					.orElse("please come again");

			return new MockResponse().setBody(body);
		}

		public void assertNoRequests() {
			assertTrue(this.requests.isEmpty(), "Forged evil-side request");
		}

		public void assertDoesNotHaveSecret() {
			assertNull(this.secret, "Forged evil-side request, exfiltrating the secret");
		}

		private Optional<String> parsePath(String path) {
			Matcher m = REQUEST_PATH.matcher(path);
			if (m.find()) {
				this.secret = m.group(3);
				return Optional.of(m.group(1));
			}
			return Optional.empty();
		}

		private byte[] readFully(InputStream is) {
			try {
				return IOUtils.toByteArray(port(is, evil.getPort()));
			} catch (IOException e) {
				throw new IllegalStateException(e);
			}
		}
	}
}
